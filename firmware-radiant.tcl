#*****************************************************************************************
# Vivado (TM) v2019.2 (64-bit)
#
# firmware-radiant.tcl: Tcl script for re-creating project 'firmware-radiant'
#
# Generated by Vivado on Fri Apr 01 08:26:19 -0400 2022
# IP Build 2700528 on Thu Nov  7 00:09:20 MST 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (firmware-radiant.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/spidma/spidma_rx_fifo/spidma_rx_fifo.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/lab4_data_debug_ila/lab4_data_debug_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/cobs/axis_cobs_decode.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/cobs/axis_cobs_encode.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/cobs/axis_fifo.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/boardman_interface.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/calram/calram_pedestal.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/hdl/clk_div_ce.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/hdl/dsp_counter_terminal_count.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/hdl/dual_prescaled_dsp_scalers.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/hdl/fast_csa63_adder.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/fast_spi_fifo/fast_spi_fifo.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/opencores_simple_spi/fifo4.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/Verilog_Library/flag_sync.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/lab4d_ctrl/lab4d_shift_register.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/lab4d_ctrl/lab4d_trigger_control.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/lab4d_ctrl/lab4d_wilkinson_ramp_v2.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/par_lab4d_readout.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/hdl/pps_core.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/pwm_wrap.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/rad_id_ctrl.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/radiant_event_ctrl.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/radiant_trig_top.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/lab4d_ctrl/radiant_trigger_control_v2.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/round_robin_arbiter.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/Verilog_Library/signal_sync.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/opencores_simple_spi/simple_spi_top.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/spidma/spidma.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/lab4d_ctrl/surf5_phase_scanner_v2.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/uart/uart_rx6.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/uart/uart_tx6.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/calram/wb_calram_v2.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/wbc_intercon.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/wb2axip/rtl/wbm2axilite.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/wishbone_arbiter.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/lab4d_ctrl/lab4d_controller.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/readout/par_lab4d_data_shift_register.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/par_lab4d_fifo.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/trig/radiant_overlord_core.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/scalers/radiant_scalers.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/trig/radiant_trig_core.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/trig/radiant_trig_oneshot.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/trig/radiant_trigger.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/trig/radiant_trigger_overlord.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/radiant-spiflash/hdl/iprog_rst.vhd"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/kcpsm6.vhd"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/src/lab4_controller_rom/lab4_controller_rom.vhd"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/src/surf5_phase_scanner_rom/surf5_phase_scanner_rom.vhd"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/radiant_top.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/lab4d_ctrl/radiant_trigger_control.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/readout/par_lab4d_ram.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/hdl/calram/wb_calram.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/hdl/dsp_delay.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/hdl/async_register.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/sim/trigger_tb.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/cobs_ila/cobs_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/jtag_ila/jtag_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/spi_ila/spi_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/intercon_ila/intercon_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/lab4d_shift_register_ila/lab4d_shift_register_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/lab4d_sysclk_ila/lab4d_sysclk_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/phaseshift_ila/phaseshift_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/trig_debug_ila/trig_debug_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/lab4d_fifo_1/lab4d_fifo.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/pwm_wbtoaxi/pwm_wbtoaxi.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/lab4_data_debug_vio/lab4_data_debug_vio.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/fast_spi_ila_debug/fast_spi_ila_debug.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/lab4_ram_debug/lab4_ram_debug.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/calram_debug_ila/calram_debug_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/spidma/descriptor_ram/descriptor_ram.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/spidma/spidma_transaction_counter/spidma_transaction_counter.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/spidma/spidma_ila/spidma_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/wb_calram_ila/wb_calram_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/wb_calram_vio/wb_calram_vio.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/event/event_hdr_fifo/event_hdr_fifo.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/event/event_type_fifo/event_type_fifo.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/lab_fifo_debug/lab_fifo_debug.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/event_ila/event_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/spi_clk_gen/spi_clk_gen.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/spidma/spidma_tx_fifo/spidma_tx_fifo.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/spidma/spi_debug_counter/spi_debug_counter.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/spidma/spi_debug_capture/spi_debug_capture.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/trigger_fifo/trigger_fifo.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/trigger_control_ila/trigger_control_ila.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/trigger/dsp_simple_scaler/dsp_simple_scaler.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/axi_pwm_core/axi_pwm_core.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/trigger/dsp_simple_scaler/trigger_rst_vio/trigger_rst_vio.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/ip/debug/radtrig_core_debug/radtrig_core_debug.xci"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/constraints/radiant.xdc"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/sim/tb_rclock.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/sim/radiant_tb.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/verilog-library-barawn/sim/clk_div_ce_tb.sv"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/sim/calram_pedestal_tb.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/sim/calram_pedestal_tb_behav.wcfg"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/sim/lab4d_wilkinson_ramp_tb.v"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/sim/radiant_tb_behav.wcfg"
#    "C:/cygwin64/home/Patrick Allison/repositories/github/firmware-radiant/pre_synthesis.tcl"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "firmware-radiant"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "firmware-radiant.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/vivado_project"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7a200tfbg676-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part_repo_paths" -value "[file normalize "$origin_dir/../../../../../../Users/Patrick"] [file normalize "$origin_dir/../../../../../../Users/Patrick"] [file normalize "$origin_dir/../../../../../../Users/Patrick Allison/AppData/Roaming/Xilinx/Vivado/Allison/AppData/Roaming/Xilinx/Vivado/Allison/AppData/Roaming/Xilinx/Vivado/2019.2/xhub/board_store"]" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7a200tfbg676-2" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "94" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "94" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "94" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "94" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "94" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "94" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "94" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "200" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/WishboneAXI"] [file normalize "$origin_dir/vivado_custom_ip"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/spidma/spidma_rx_fifo/spidma_rx_fifo.xci"] \
 [file normalize "${origin_dir}/ip/debug/lab4_data_debug_ila/lab4_data_debug_ila.xci"] \
 [file normalize "${origin_dir}/hdl/cobs/axis_cobs_decode.v"] \
 [file normalize "${origin_dir}/hdl/cobs/axis_cobs_encode.v"] \
 [file normalize "${origin_dir}/hdl/cobs/axis_fifo.v"] \
 [file normalize "${origin_dir}/hdl/boardman_interface.v"] \
 [file normalize "${origin_dir}/hdl/calram/calram_pedestal.v"] \
 [file normalize "${origin_dir}/verilog-library-barawn/hdl/clk_div_ce.v"] \
 [file normalize "${origin_dir}/verilog-library-barawn/hdl/dsp_counter_terminal_count.v"] \
 [file normalize "${origin_dir}/verilog-library-barawn/hdl/dual_prescaled_dsp_scalers.v"] \
 [file normalize "${origin_dir}/verilog-library-barawn/hdl/fast_csa63_adder.v"] \
 [file normalize "${origin_dir}/hdl/fast_spi_fifo/fast_spi_fifo.v"] \
 [file normalize "${origin_dir}/hdl/opencores_simple_spi/fifo4.v"] \
 [file normalize "${origin_dir}/hdl/Verilog_Library/flag_sync.v"] \
 [file normalize "${origin_dir}/hdl/lab4d_ctrl/lab4d_shift_register.v"] \
 [file normalize "${origin_dir}/hdl/lab4d_ctrl/lab4d_trigger_control.v"] \
 [file normalize "${origin_dir}/hdl/lab4d_ctrl/lab4d_wilkinson_ramp_v2.v"] \
 [file normalize "${origin_dir}/hdl/par_lab4d_readout.v"] \
 [file normalize "${origin_dir}/verilog-library-barawn/hdl/pps_core.v"] \
 [file normalize "${origin_dir}/hdl/pwm_wrap.v"] \
 [file normalize "${origin_dir}/hdl/rad_id_ctrl.v"] \
 [file normalize "${origin_dir}/hdl/radiant_event_ctrl.v"] \
 [file normalize "${origin_dir}/hdl/radiant_trig_top.v"] \
 [file normalize "${origin_dir}/hdl/lab4d_ctrl/radiant_trigger_control_v2.v"] \
 [file normalize "${origin_dir}/hdl/round_robin_arbiter.v"] \
 [file normalize "${origin_dir}/hdl/Verilog_Library/signal_sync.v"] \
 [file normalize "${origin_dir}/hdl/opencores_simple_spi/simple_spi_top.v"] \
 [file normalize "${origin_dir}/hdl/spidma/spidma.v"] \
 [file normalize "${origin_dir}/hdl/lab4d_ctrl/surf5_phase_scanner_v2.v"] \
 [file normalize "${origin_dir}/hdl/uart/uart_rx6.v"] \
 [file normalize "${origin_dir}/hdl/uart/uart_tx6.v"] \
 [file normalize "${origin_dir}/hdl/calram/wb_calram_v2.v"] \
 [file normalize "${origin_dir}/hdl/wbc_intercon.v"] \
 [file normalize "${origin_dir}/wb2axip/rtl/wbm2axilite.v"] \
 [file normalize "${origin_dir}/hdl/wishbone_arbiter.v"] \
 [file normalize "${origin_dir}/hdl/lab4d_ctrl/lab4d_controller.sv"] \
 [file normalize "${origin_dir}/hdl/readout/par_lab4d_data_shift_register.sv"] \
 [file normalize "${origin_dir}/hdl/par_lab4d_fifo.sv"] \
 [file normalize "${origin_dir}/hdl/trig/radiant_overlord_core.sv"] \
 [file normalize "${origin_dir}/hdl/scalers/radiant_scalers.sv"] \
 [file normalize "${origin_dir}/hdl/trig/radiant_trig_core.sv"] \
 [file normalize "${origin_dir}/hdl/trig/radiant_trig_oneshot.sv"] \
 [file normalize "${origin_dir}/hdl/trig/radiant_trigger.sv"] \
 [file normalize "${origin_dir}/hdl/trig/radiant_trigger_overlord.sv"] \
 [file normalize "${origin_dir}/../radiant-spiflash/hdl/iprog_rst.vhd"] \
 [file normalize "${origin_dir}/hdl/kcpsm6.vhd"] \
 [file normalize "${origin_dir}/src/lab4_controller_rom/lab4_controller_rom.vhd"] \
 [file normalize "${origin_dir}/src/surf5_phase_scanner_rom/surf5_phase_scanner_rom.vhd"] \
 [file normalize "${origin_dir}/hdl/radiant_top.v"] \
 [file normalize "${origin_dir}/hdl/lab4d_ctrl/radiant_trigger_control.v"] \
 [file normalize "${origin_dir}/hdl/readout/par_lab4d_ram.sv"] \
 [file normalize "${origin_dir}/hdl/calram/wb_calram.v"] \
 [file normalize "${origin_dir}/verilog-library-barawn/hdl/dsp_delay.v"] \
 [file normalize "${origin_dir}/verilog-library-barawn/hdl/async_register.v"] \
 [file normalize "${origin_dir}/sim/trigger_tb.sv"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/spidma/spidma_rx_fifo/spidma_rx_fifo.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/ip/debug/lab4_data_debug_ila/lab4_data_debug_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/hdl/lab4d_ctrl/lab4d_controller.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/readout/par_lab4d_data_shift_register.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/par_lab4d_fifo.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/trig/radiant_overlord_core.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/scalers/radiant_scalers.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/trig/radiant_trig_core.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/trig/radiant_trig_oneshot.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/trig/radiant_trigger.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/trig/radiant_trigger_overlord.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../radiant-spiflash/hdl/iprog_rst.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/hdl/kcpsm6.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/src/lab4_controller_rom/lab4_controller_rom.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/src/surf5_phase_scanner_rom/surf5_phase_scanner_rom.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/hdl/readout/par_lab4d_ram.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/trigger_tb.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_implementation" -value "0" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "include_dirs" -value "[file normalize "$origin_dir/../../../../Patrick"] [file normalize "$origin_dir/../../../../../../Users/Patrick Allison/AppData/Roaming/Xilinx/Vivado/Allison/repositories/github/firmware-radiant/hdl"] [file normalize "$origin_dir/../../../../Patrick"] [file normalize "$origin_dir/../../../../../../Users/Patrick Allison/AppData/Roaming/Xilinx/Vivado/Allison/repositories/github/firmware-radiant/verilog-library-barawn/hdl"]" -objects $obj
set_property -name "top" -value "radiant_top" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/cobs_ila/cobs_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/cobs_ila/cobs_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/jtag_ila/jtag_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/jtag_ila/jtag_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/spi_ila/spi_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/spi_ila/spi_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/intercon_ila/intercon_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/intercon_ila/intercon_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/lab4d_shift_register_ila/lab4d_shift_register_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/lab4d_shift_register_ila/lab4d_shift_register_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/lab4d_sysclk_ila/lab4d_sysclk_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/lab4d_sysclk_ila/lab4d_sysclk_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/phaseshift_ila/phaseshift_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/phaseshift_ila/phaseshift_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/trig_debug_ila/trig_debug_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/trig_debug_ila/trig_debug_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/lab4d_fifo_1/lab4d_fifo.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/lab4d_fifo_1/lab4d_fifo.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/pwm_wbtoaxi/pwm_wbtoaxi.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/pwm_wbtoaxi/pwm_wbtoaxi.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/lab4_data_debug_vio/lab4_data_debug_vio.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/lab4_data_debug_vio/lab4_data_debug_vio.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/fast_spi_ila_debug/fast_spi_ila_debug.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/fast_spi_ila_debug/fast_spi_ila_debug.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/lab4_ram_debug/lab4_ram_debug.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/lab4_ram_debug/lab4_ram_debug.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/calram_debug_ila/calram_debug_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/calram_debug_ila/calram_debug_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/spidma/descriptor_ram/descriptor_ram.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/spidma/descriptor_ram/descriptor_ram.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/spidma/spidma_transaction_counter/spidma_transaction_counter.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/spidma/spidma_transaction_counter/spidma_transaction_counter.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/spidma/spidma_ila/spidma_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/spidma/spidma_ila/spidma_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/wb_calram_ila/wb_calram_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/wb_calram_ila/wb_calram_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/wb_calram_vio/wb_calram_vio.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/wb_calram_vio/wb_calram_vio.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/event/event_hdr_fifo/event_hdr_fifo.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/event/event_hdr_fifo/event_hdr_fifo.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/event/event_type_fifo/event_type_fifo.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/event/event_type_fifo/event_type_fifo.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/lab_fifo_debug/lab_fifo_debug.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/lab_fifo_debug/lab_fifo_debug.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/event_ila/event_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/event_ila/event_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/spi_clk_gen/spi_clk_gen.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/spi_clk_gen/spi_clk_gen.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/spidma/spidma_tx_fifo/spidma_tx_fifo.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/spidma/spidma_tx_fifo/spidma_tx_fifo.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/spidma/spi_debug_counter/spi_debug_counter.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/spidma/spi_debug_counter/spi_debug_counter.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/spidma/spi_debug_capture/spi_debug_capture.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/spidma/spi_debug_capture/spi_debug_capture.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/trigger_fifo/trigger_fifo.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/trigger_fifo/trigger_fifo.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/trigger_control_ila/trigger_control_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/trigger_control_ila/trigger_control_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/trigger/dsp_simple_scaler/dsp_simple_scaler.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/trigger/dsp_simple_scaler/dsp_simple_scaler.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/axi_pwm_core/axi_pwm_core.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/axi_pwm_core/axi_pwm_core.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/trigger/dsp_simple_scaler/trigger_rst_vio/trigger_rst_vio.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/trigger/dsp_simple_scaler/trigger_rst_vio/trigger_rst_vio.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/radtrig_core_debug/radtrig_core_debug.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/radtrig_core_debug/radtrig_core_debug.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/constraints/radiant.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/constraints/radiant.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_constrs_file" -value "[file normalize "$origin_dir/constraints/radiant.xdc"]" -objects $obj
set_property -name "target_part" -value "xc7a200tfbg676-2" -objects $obj
set_property -name "target_ucf" -value "[file normalize "$origin_dir/constraints/radiant.xdc"]" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/verilog-library-barawn/sim/tb_rclock.sv"] \
 [file normalize "${origin_dir}/sim/radiant_tb.sv"] \
 [file normalize "${origin_dir}/verilog-library-barawn/sim/clk_div_ce_tb.sv"] \
 [file normalize "${origin_dir}/sim/calram_pedestal_tb.v"] \
 [file normalize "${origin_dir}/sim/calram_pedestal_tb_behav.wcfg"] \
 [file normalize "${origin_dir}/sim/lab4d_wilkinson_ramp_tb.v"] \
 [file normalize "${origin_dir}/sim/radiant_tb_behav.wcfg"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/verilog-library-barawn/sim/tb_rclock.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/radiant_tb.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/verilog-library-barawn/sim/clk_div_ce_tb.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "include_dirs" -value "[file normalize "$origin_dir/../../../../Patrick"] [file normalize "$origin_dir/../../../../../../Users/Patrick Allison/AppData/Roaming/Xilinx/Vivado/Allison/repositories/github/firmware-radiant/hdl"]" -objects $obj
set_property -name "top" -value "radiant_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj
set_property -name "verilog_define" -value "DEBUG_NONE=1" -objects $obj
set_property -name "xsim.elaborate.debug_level" -value "all" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
set files [list \
 [file normalize "${origin_dir}/pre_synthesis.tcl"] \
]
add_files -norecurse -fileset $obj $files

# Set 'utils_1' fileset file properties for remote files
set file "$origin_dir/pre_synthesis.tcl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets utils_1] [list "*$file"]]
set_property -name "file_type" -value "TCL" -objects $file_obj


# Set 'utils_1' fileset file properties for local files
# None

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a200tfbg676-2 -flow {Vivado Synthesis 2019} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "part" -value "xc7a200tfbg676-2" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj
set_property -name "steps.synth_design.tcl.pre" -value "[file normalize "$origin_dir/pre_synthesis.tcl"]" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a200tfbg676-2 -flow {Vivado Implementation 2019} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "part" -value "xc7a200tfbg676-2" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.opt_design.args.directive" -value "AddRemap" -objects $obj
set_property -name "steps.place_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.phys_opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.phys_opt_design.args.directive" -value "ExploreWithAggressiveHoldFix" -objects $obj
set_property -name "steps.route_design.args.directive" -value "MoreGlobalIterations" -objects $obj
set_property -name "steps.post_route_phys_opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.post_route_phys_opt_design.args.directive" -value "ExploreWithAggressiveHoldFix" -objects $obj
set_property -name "steps.write_bitstream.args.bin_file" -value "1" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
